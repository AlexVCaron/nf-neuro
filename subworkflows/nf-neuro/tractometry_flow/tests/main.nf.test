nextflow_workflow {

    name "Test Subworkflow TRACTOMETRY_FLOW"
    script "../main.nf"
    workflow "TRACTOMETRY_FLOW"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/tractometry_flow"

    tag  "tractogram/removeinvalid"
    tag  "bundle/fixelafd"
    tag  "tractogram/resample"
    tag  "bundle/centroid"
    tag  "bundle/labelmap"
    tag  "bundle/uniformize"
    tag  "bundle/stats"

    tag "load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "bundles.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("sarscov2 - bam - single_end") {

        when {
            workflow {
                """
                // TODO nf-core: define inputs of the workflow here. Example:
                input[0] = [ [ id:'test', single_end:false ], // meta map
                        file(params.test_data['sarscov2']['illumina']['test_single_end_bam'], checkIfExists: true)
                        ]
                input[1] = [ [ id:'genome' ],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                        ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }
    }
}
