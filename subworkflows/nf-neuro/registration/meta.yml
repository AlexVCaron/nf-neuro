name: "registration"
description: |
  Subworkflow to perform registration between a moving and a fixed image (e.g. T1 -> DWI).
  It requires as input at least a moving (ch_image) and a reference (ch_ref) image to properly
  perform registration.

  Output transformations curated for use with the REGISTRATION_ANTSAPPLYTRANSFORMS subworkflows
  are available under the names image_transform and tractogram_transform, and their inverses.

  Registration suites:
  - EasyReg (ML): params.run_easyreg = true

    module: REGISTRATION_EASYREG

    Run freesurfer EasyReg any-to-any modality registration.

    NOTE: Outputs a combined warp field only, no affine transformations are available. CANNOT BE LINKED WITH THE BUNDLE_SEG SUBWORKFLOW.

  - Synthmorph (ML): params.run_synthmorph = true

    module: REGISTRATION_SYNTHREGISTRATION

    Run SynthMorph any-to-any modality registration. By default, the algorithm is configured to
    run a chain of affin+deformable transformations, making it suitable for use with most modules
    and subworkflows like BUNDLE_SEG.

    NOTE: the output affine transformation file is in .lta format and needs to be converted to .mat to be used with ANTs using the REGISTRATION_CONVERT module.

  - ANTs (SyN+SyN Quick): params.run_easyreg = false && params.run_synthmorph = false

    module: REGISTRATION_ANTS or REGISTRATION_ANATTODWI

    Run ANTs registration using antsRegistrationSyN.sh (quick version also available).

    NOTE : Transformation to DWI space is available. To trigger it, supply a metric file (ch_metric) in DWI space (e.g. FA map) in addition to the moving (ch_image) and reference (ch_ref) images.
keywords:
  - Registration
  - Transformation
  - DWI
  - Anatomical
components:
  - registration/anattodwi
  - registration/ants
  - registration/easyreg
  - registration/synthregistration
input:
  - ch_fixed_image:
      type: file
      description: |
        The input channel containing the fixed image files. If performing
        registration to DWI space, this is the reference image (e.g. b0 image).
        Structure: [ val(meta), path(fixed_image) ]
      pattern: "*.{nii,nii.gz}"
      mandatory: true
  - ch_moving_image:
      type: file
      description: |
        Input channel containing the moving image files. If performing
        registration to DWI space, this is the anatomical image to be registered.
        Structure: [ val(meta), path(image) ]
      pattern: "*.{nii,nii.gz}"
      mandatory: true
  - ch_metric:
      type: file
      description: |
        FOR USE WITH REGISTRATION TO DWI SPACE ONLY. The input channel containing the metric files, typically a FA map.
        Structure: [ val(meta), path(metric) ]
      pattern: "*.{nii,nii.gz}"
      mandatory: false
  - ch_fixed_mask:
      type: file
      description: |
        FOR USE WITH ANTS SYN REGISTRATION ONLY. The input channel containing the mask file in fixed image space.
        Structure: [ val(meta), path(mask) ]
      pattern: "*.{nii,nii.gz}"
      mandatory: false
  - ch_segmentation:
      type: file
      description: |
        FOR USE WITH SYNTHMORPH REGISTRATION ONLY. The input channel containing the SynthSeg v2 (non-robust)
        segmentation + parcellation in fixed image space (reference in Easyreg naming convention) image.
      pattern: "*.{nii,nii.gz}"
      mandatory: false
  - ch_moving_segmentation:
      type: file
      description: |
        FOR USE WITH SYNTHMORPH REGISTRATION ONLY. The input channel containing the SynthSeg v2 (non-robust)
        segmentation + parcellation in moving image space (floating in Easyreg naming convention) image.
      pattern: "*.{nii,nii.gz}"
      mandatory: false
output:
  - image_warped:
      type: file
      description: |
        Channel containing images warped in fixed space.
        Structure: [ val(meta), path(image) ]
      pattern: "*.{nii,nii.gz}"
  - ref_warped:
      type: file
      description: |
        ONLY PROVIDED BY REGISTRATION_EASYREG. Channel containing the reference image warped in moving space.
        Structure: [ val(meta), path(image) ]
      pattern: "*.{nii,nii.gz}"
      optional: true
  - affine:
      type: file
      description: |
        Channel containing the affine forward transformation matrix file.
        Structure: [ val(meta), path(affine) ]
      pattern: "*__forward*.{lta,mat}"
      optional: true
  - warp:
      type: file
      description: |
        Channel containing the forward deformation field file.
        Structure: [ val(meta), path(warp) ]
      pattern: "*__forward*.{nii,nii.gz}"
  - inverse_warp:
      type: file
      description: |
        Channel containing the inverse deformation field file.
        Structure: [ val(meta), path(inverse_warp) ]
      pattern: "*__backward*.{nii,nii.gz}"
  - inverse_affine:
      type: file
      description: |
        Channel containing the inverse affine transformation matrix file.
        Structure: [ val(meta), path(inverse_affine) ]
      pattern: "*__backward*.{lta,mat}"
      optional: true
  - image_transform:
      type: list
      description: |
        Tuple, Transformation files to warp images in the correct order
        for REGISTRATION_ANTSAPPLYTRANSFORMS : [ meta, [ warp, affine ] ].
      pattern: "*__forward*.{nii,nii.gz,mat,lta}"
  - inverse_image_transform:
      type: list
      description: |
        Tuple, Transformation files to warp images in the correct order for
        REGISTRATION_ANTSAPPLYTRANSFORMS : [ meta, [ inverse_affine, inverse_warp ] ].
      pattern: "*__backward*.{nii,nii.gz,mat,lta}"
  - tractogram_transform:
      type: list
      description: |
        Tuple, Transformation files to warp tractograms in the correct order
        for REGISTRATION_TRANSFORMTRACTOGRAM : [ meta, [ inverse_affine, inverse_warp ] ].
      pattern: "*__backward*.{nii,nii.gz,mat,lta}"
  - inverse_tractogram_transform:
      type: list
      description: |
        Tuple, Transformation files to warp tractograms in the correct order
        for REGISTRATION_TRANSFORMTRACTOGRAM : [ meta, [ warp, affine ] ].
      pattern: "*__forward*.{nii,nii.gz,mat,lta}"
  - segmentation:
      type: file
      description: |
        ONLY PROVIDED BY REGISTRATION_SYNTHREGISTRATION. Channel containing the SynthSeg v2 (non-robust)
        segmentation + parcellation in moving space (floating in Easyreg naming convention).
      pattern: "*.{nii,nii.gz}"
      optional: true
  - ref_segmentation:
      type: file
      description: |
        ONLY PROVIDED BY REGISTRATION_SYNTHREGISTRATION. Channel containing the SynthSeg v2 (non-robust)
        segmentation + parcellation in fixed space (reference in Easyreg naming convention).
      pattern: "*.{nii,nii.gz}"
      optional: true
  - versions:
      type: file
      description: |
        File containing software versions used.
        Structure: [ path(versions.yml) ]
      pattern: "versions.yml"
authors:
  - "@gagnonanthony"
  - "@AlexVCaron"
