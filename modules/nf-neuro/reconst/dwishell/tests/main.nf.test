// nf-core modules test reconst/dwishell
nextflow_process {

    name "Test Process RECONST_DWISHELL"
    script "../main.nf"
    process "RECONST_DWISHELL"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfneuro"
    tag "reconst"
    tag "reconst/dwishell"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "DWIss1000-dir32.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("dwishell") {

        when {
            process {
            """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi.nii.gz"),
                        file("\${test_data_directory}/dwi.bval"),
                        file("\${test_data_directory}/dwi.bvec")
                    ]}
            """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.dwi_shells,
                    process.out.versions).match() }
            )
        }
    }

    test("dwishell - stub") {

        tag "stub"
        options "-stub-run"

        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi.nii.gz"),
                        file("\${test_data_directory}/dwi.bval"),
                        file("\${test_data_directory}/dwi.bvec")
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
            )
        }

    }
}
